E.dispatch("bibi:says-welcome");
E.dispatch("bibi:says-byebye");
E.dispatch("bibi:readied");
E.dispatch("bibi:waits");
E.dispatch("bibi:played");
E.dispatch("bibi:loaded-package-document");
E.dispatch("bibi:prepared");
E.dispatch("bibi:created-cover", R.CoverImage.Path);
E.dispatch("bibi:loaded-navigation", I.Panel.BookInfo.Navigation.Path);
E.dispatch("bibi:is-going-to:preprocess-resources");
E.dispatch("bibi:preprocessed-resources");
E.dispatch("bibi:is-going-to:postprocess-item-content", Item);
E.dispatch("bibi:postprocessed-item-content", Item);
E.dispatch("bibi:postprocessed-item", Item);
E.dispatch("bibi:commands:focus-on", { Destination: A.Destination, Duration: 0 });
E.dispatch("bibi:loaded-item", Item);
E.dispatch("bibi:loaded-spread", Spread);
E.dispatch("bibi:loaded-items");
E.dispatch("bibi:loaded-spreads");
E.dispatch("bibi:loaded-items-in-spreads");
E.dispatch("bibi:loaded-book");
E.dispatch("bibi:laid-out:for-the-first-time");
E.dispatch("bibi:opened");
E.dispatch("bibi:is-going-to:reset-spread", Spread);
E.dispatch("bibi:reset-spread", Spread);
E.dispatch("bibi:is-going-to:reset-item", Item);
E.dispatch("bibi:reset-item", Item);
E.dispatch("bibi:is-going-to:adjust-content", Item);
E.dispatch("bibi:adjusted-content", Item);
E.dispatch("bibi:is-going-to:lay-out-spread", Spread);
E.dispatch("bibi:laid-out-spread", Spread);
E.dispatch("bibi:is-going-to:lay-out", Opt);
E.dispatch("bibi:commands:focus-on", { Destination: Opt.Destination, Duration: 0 });
E.dispatch("bibi:laid-out");
E.dispatch("bibi:changes-orientation", R.Orientation);
E.dispatch("bibi:changed-orientation", R.Orientation);
E.dispatch("bibi:scrolls", Eve);
E.dispatch("bibi:scrolled", Eve);
E.dispatch("bibi:resizes", Eve);
E.dispatch("bibi:resized", Eve);
E.dispatch("bibi:taps",   Eve);
E.dispatch("bibi:tapped", Eve);
E.dispatch("bibi:moved-pointer",   Eve);
E.dispatch("bibi:stopped-pointer", Eve);
E.dispatch("bibi:wheeled", Eve);
E.dispatch("bibi:changed-view", RVM);
E.dispatch("bibi:is-going-to:focus-on", Par);
E.dispatch("bibi:focused-on", Par);
E.dispatch("bibi:is-going-to:move-by", Par);
E.dispatch("bibi:moved-by", Par);
E.dispatch("bibi:commands:scroll-by", Par);
E.dispatch("bibi:commands:focus-on", Par);
E.dispatch("bibi:is-going-to:scroll-by", Par);
E.dispatch("bibi:scrolled-by", Par);
E.dispatch("bibi:created-notifier");
E.dispatch("bibi:played:by-button");
E.dispatch("bibi:created-veil");
E.dispatch("bibi:opened-panel");
E.dispatch("bibi:closed-panel");
E.dispatch("bibi:commands:toggle-panel");
E.dispatch("bibi:created-panel");
E.dispatch("bibi:opened-menu");
E.dispatch("bibi:closed-menu");
E.dispatch("bibi:hovers", Eve, I.Menu);
E.dispatch("bibi:unhovers", Eve, I.Menu);
E.dispatch("bibi:commands:toggle-menu")
E.dispatch("bibi:commands:toggle-menu")
E.dispatch("bibi:created-menu");
E.dispatch("bibi:requested-fullscreen");
E.dispatch("bibi:exited-fullscreen");
E.dispatch("bibi:created-nombre");
//E.dispatch("bibi:commands:focus-on", 0);
E.dispatch("bibi:commands:focus-on", { Destination: TargetPage, Duration: 0, callback: callback });
E.dispatch("bibi:commands:focus-on", { Destination: TargetPage, Duration: 0 });
E.dispatch("bibi:opened-slider");
E.dispatch("bibi:closed-slider");
E.dispatch("bibi:commands:toggle-slider")
E.dispatch("bibi:commands:toggle-slider")
E.dispatch("bibi:created-slider");
E.dispatch("bibi:commands:move-by", { Distance: Arrow.Distance });
E.dispatch("bibi:hovers",   Eve, I.Arrows[Dir]);
E.dispatch("bibi:unhovers", Eve, I.Arrows[Dir].Pair);
E.dispatch("bibi:unhovers", Eve, I.Arrows.Back);
E.dispatch("bibi:unhovers", Eve, I.Arrows.Forward);
//E.dispatch("bibi:commands:move-by", { Distance: I.Arrows[Dir].Distance });
E.dispatch("bibi:taps",   Eve, I.Arrows[Dir]);
E.dispatch("bibi:tapped", Eve, I.Arrows[Dir]);
E.dispatch("bibi:tapped", null, I.Arrows[Dir]);
E.dispatch("bibi:created-arrows");
E.dispatch("bibi:downs-key", Eve);
E.dispatch("bibi:ups-key", Eve);
E.dispatch("bibi:presses-key", Eve);
E.dispatch("bibi:commands:move-by",  { Distance:    MovingParameter });
E.dispatch("bibi:commands:focus-on", { Destination: MovingParameter });
E.dispatch("bibi:created-keylistener");
E.dispatch("bibi:commands:move-by", { Distance: I.Arrows[From].Distance });
E.dispatch("bibi:commands:move-by", { Distance: Eve.BibiSwiperWheel.Distance });
E.dispatch("bibi:created-swiper");
E.dispatch("bibi:created-spinner");
E.dispatch("bibi:hovers",   Eve, Ele) });
E.dispatch("bibi:unhovers", Eve, Ele) });
E.dispatch("bibi:taps",   Ele.TouchStart.Event, Ele);
E.dispatch("bibi:tapped", Ele.TouchStart.Event, Ele);
E.dispatch("bibi:is-going-to:tap:ui", Ele);
E.dispatch("bibi:tapped:ui", Ele);
E.dispatch("bibi:updated-settings", S);
E.dispatch("bibi:x_x", Msg);
